install.packages("timelineS")
library(timelineS)
On.NAP <- data.frame()
date <- c(1994,
2004,
2005,
2010,
2011,
2014,
2016,
2017)
des<- c("Onondaga Lake sediments added to USEPA Superfund National Priorities List",
"Metropolitan Wastewater Treatment Plant tertiary treatment improvements",
"Dredging, capping, oxygenation, and monitored natural recovery decided as action steps of 'Onondaga Lake Remedy",
"Chemical limnology and hydrological monitoring and modeling completed; nitrate addition deemed more appropriate than oxygenation",
"3-year nitrate addition pilot project",
"Dredging completed",
"Capping completed",
"Habitat restoration completed")
On.NAP <- data.frame(date,des)
View(On.NAP)
# Make timeline
timelineS(On.NAP, main = "Series of Events Affecting NAP", label.direction = "up", label.position = 3, line.color = "black",
label.color = "black", point.color = "black")
str(On.NAP)
On.NAP$date <- as.Date(as.character(On.NAP$date))
str(On.NAP)
On.NAP$des <- as.character(On.NAP$des)
# Make timeline
timelineS(On.NAP, main = "Series of Events Affecting NAP", label.direction = "up", label.position = 3, line.color = "black",
label.color = "black", point.color = "black")
On.NAP$date <-as.Date(On.NAP$date, c("%Y"))
On.NAP$date <-as.Date(On.NAP$date, "%Y")
On.NAP$date <-as.Date(as.character(On.NAP$date), "%Y")
str(On.NAP)
# Make timeline
timelineS(On.NAP, main = "Series of Events Affecting NAP", label.direction = "up", label.position = 3, line.color = "black",
label.color = "black", point.color = "black")
On.NAP$date <-as.numeric(as.character(On.NAP$date))
# Create dataframe with important Onondaga/Nitrate Addition events
date <- c(1994,
2004,
2005,
2010,
2011,
2014,
2016,
2017)
des<- c("Onondaga Lake sediments added to USEPA Superfund National Priorities List",
"Metropolitan Wastewater Treatment Plant tertiary treatment improvements",
"Dredging, capping, oxygenation, and monitored natural recovery decided as action steps of 'Onondaga Lake Remedy",
"Chemical limnology and hydrological monitoring and modeling completed; nitrate addition deemed more appropriate than oxygenation",
"3-year nitrate addition pilot project",
"Dredging completed",
"Capping completed",
"Habitat restoration completed")
On.NAP <- data.frame(date,des)
On.NAP$des <- as.character(On.NAP$des)
On.NAP$date <-as.numeric(as.character(On.NAP$date))
# Make timeline
timelineS(On.NAP, main = "Series of Events Affecting NAP", label.direction = "up", label.position = 3, line.color = "black",
label.color = "black", point.color = "black")
install.packages("vistime")
library(vistime)
# Make timeline
vistime(On.NAP)
# Create dataframe with important Onondaga/Nitrate Addition events
start <- c(1994,
2004,
2005,
2010,
2011,
2014,
2016,
2017)
end <-c(
)
des<- c("Onondaga Lake sediments added to USEPA Superfund National Priorities List",
"Metropolitan Wastewater Treatment Plant tertiary treatment improvements",
"Dredging, capping, oxygenation, and monitored natural recovery decided as action steps of 'Onondaga Lake Remedy",
"Chemical limnology and hydrological monitoring and modeling completed; nitrate addition deemed more appropriate than oxygenation",
"3-year nitrate addition pilot project",
"Dredging completed",
"Capping completed",
"Habitat restoration completed")
On.NAP <- data.frame(start,end,des)
end <-c("","","","","","","",""
)
des<- c("Onondaga Lake sediments added to USEPA Superfund National Priorities List",
"Metropolitan Wastewater Treatment Plant tertiary treatment improvements",
"Dredging, capping, oxygenation, and monitored natural recovery decided as action steps of 'Onondaga Lake Remedy",
"Chemical limnology and hydrological monitoring and modeling completed; nitrate addition deemed more appropriate than oxygenation",
"3-year nitrate addition pilot project",
"Dredging completed",
"Capping completed",
"Habitat restoration completed")
On.NAP <- data.frame(start,end,des)
# Make timeline
vistime(On.NAP)
On.NAP$des <- as.character(On.NAP$des)
On.NAP$start <-as.character(On.NAP$start)
str(On.NAP)
On.NAP$end <-as.character(On.NAP$end)
# Make timeline
vistime(On.NAP)
# Make timeline
vistime(On.NAP,start = "start", end = "end", events = "des")
On.NAP$start <-as.POSIXct(On.NAP$start)
On.NAP$end <-as.POSIXct(On.NAP$end)
citation()
citation(package = "MASS")
names<-as.data.frame(c("Adam","Foster","Jen","Rhianne","Lauren"))
names(names)<-"NAME"
sample(names$NAME,2)
sample(names$NAME,2)
sample(names$NAME,2)
sample(names$NAME,2)
sample(names$NAME,2)
sample(names$NAME,2)
sample(names$NAME,2)
reactiveValues()
# Load packages and Set Working Directory----
my_packages <- c("lubridate", "plyr", "openxlsx", "dplyr","ggpubr",  "tidyr", "shiny","ggplot2","leaflet", "ggvis", "RSQLite","knitr")
lapply(my_packages, require, character.only = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Initial Setup for Application----
# Load data files from initial data workup file (looop_data)
source("looop_data.R")
param_choices <- c("Temp", "SC", "pH", "DO", "Tn", "Chl")
names(param_choices) <- c("Temperature", "Specific Conductance","pH","Dissolved Oxygen","Turbidity","Chlorophyll-a")
reactiveValues()
# Shiny File for running LOOOP page
# You can run the application by clicking the 'Run App' button above; large application so it may not load
# Note, when the application is running you have to press the Stop button in order to run additional code.
# Use shinyApp() to print application; images will not load using this function
# Load packages and Set Working Directory----
my_packages <- c("lubridate", "plyr", "openxlsx", "dplyr","ggpubr",  "tidyr", "shiny","ggplot2","leaflet", "ggvis", "RSQLite","knitr","rLakeAnalyzer")
lapply(my_packages, require, character.only = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Initial Setup for Application----
# Load data files from initial data workup file (looop_data)
source("looop_data.R")
param_choices <- c("Temp", "SC", "pH", "DO", "Tn", "Chl")
names(param_choices) <- c("Temperature", "Specific Conductance","pH","Dissolved Oxygen","Turbidity","Chlorophyll-a")
# Create User Interface (UI)----
ui <-fluidPage(
# Title that will appear at top of page
navbarPage(title = div(
#style = "padding: 1px 0px; width: '100%'",
img(src = "logo_looop.png", width = "20px",height = "20px"),
"LOOOP-Lake Ontario, Oneida, Onondaga Program"
),
# Data Explorer Interactive Application tab (sub-tabs on side panel)----
tabPanel("Data Explorer", icon = icon("chart-bar"),
# Adding in side-panel navigational sub-tabs
navlistPanel("Data Explorer",
# First side-panel navigational tab (Application)
tabPanel("Application",
# Setting up interface using fluid grid system (12 columns across)
fluidRow(
# In columns 1-5, map of area with clickable data points will appear
column(5, h4("Click a site"),
shinycssloaders::withSpinner(leaflet::leafletOutput("mymap"))
),
# In columns 6-8, data filter/inputs for graphing will appear
column(3,
wellPanel(
# Overall Title
h4("Plot options"),
# Time Range Slider
uiOutput("date_slider"),
# Selection for Parameter
selectInput("param_choices", label = "Parameter:",
choices = param_choices
),
checkboxInput("show_dates", label = "Show all profile dates", value = TRUE)
)
),
# Output from selections, in columns 9-12
column(4,
# Plot graph
plotOutput("isopleths")
)
)
), # End of Application Sub-tab
# Second side-panel navigational tab (User's Guide)
tabPanel("User's Guide",
h4(p("Coming Soon"))
), # End of How-To Sub-tab
# Third side-panel navigational tab (Meta Data)
tabPanel("Metadata",
h4(p("Coming Soon"))
), # End of Meta sub-tab
# Set side-panel width (2) and Nav list panel (10) widths using fluid grid system
fluid = TRUE, widths = c(2,10))), # End of Data Explorer tab
# Lake Characteristics navigational (expandable) tab----
navbarMenu("Lake Characteristics", icon = icon("water"),
# Options beneath "Lake Characteristics"
tabPanel("Lake Ontario",
h4(p("Coming Soon"))
),
tabPanel("Oneida Lake",
h4(p("Coming Soon"))
),
tabPanel("Onondaga Lake",
h4(p("Coming Soon"))
)
), # End of Lake Characteristics tab
# Topics navigational (expandable) tab----
navbarMenu("Topics", icon = icon("lightbulb"),
# Options beneath "Topics"
tabPanel("Great Lakes Geomorphology",
# Read R markdown file that contains text and images
includeMarkdown("StaticPosts/Geomorph.Rmd")),
tabPanel("Lake Levels",
includeMarkdown("StaticPosts/LakeLevels.Rmd")),
tabPanel("Land Use",
includeMarkdown("StaticPosts/LandUse.Rmd")),
tabPanel("Fisheries",
h5(p("Coming Soon"))),
tabPanel("Effects of Pollution",
includeMarkdown("StaticPosts/Pollution.Rmd"))
), # End of Topics tab
# About LOOOP tab----
tabPanel("About LOOOP", icon = icon("info-circle"),
fluidRow(column(6,
includeMarkdown("StaticPosts/About.Rmd")),
column(6,
img(src = "~/logo_looop.png", width = "20px",height = "20px"))
)
), # End of About tab
# Credits and Privacy Policy tab----
tabPanel("Credits, Policy and Contact Information", icon = icon("question-circle"),
h4(p("Coming Soon"))
) #End of Policy tab
) # End of NavBarpage
) # End of Fluid Page
# Create server function (response to UI)----
server <- function(input, output, session){
reactive_objects = reactiveValues()
mymap <- createLeafletMap(session, "mymap")
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = buoy.coord$long,
lat = buoy.coord$lat,
popup = buoy.coord$station.code,
labelOptions = labelOptions(textsize = "15px")
)
})
})
observe({
site_click <- input$map_marker_click
if(is.null(site_click))
{return()}
siteid = site_click$Site
reactive_objects$sel_mlid = siteid})
observe({
req(reactive_objects$sel_mlid)
reactive_objects$sel_profiles=data_long[data_long$Site==reactive_objects$sel_mlid,]
profile_dates = unique(reactive_objects$sel_profiles$Date)
profile_dates = profile_dates[order(profile_dates)]
reactive_objects$profile_dates = profile_dates
})
output$date_slider <- renderUI({
req(reactive_objects$profile_dates)
date_min = min(reactive_objects$profile_dates)
date_max = max(reactive_objects$profile_dates)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max))
})
output$isopleth = renderPlot({
req(reactive_objects$sel_profs_wide, reactive_objects$sel_profiles)
if(dim(reactive_objects$sel_profs_wide)[1]>0){
if(length(unique(reactive_objects$sel_profs_wide$Date))==1){
plot.new()
text(0.5,0.5, "Only one profile date available, cannot interpolate.")
box()
}
else{
if(input$param_choices=="DO"){
name = "Dissolved Oxygen"
parameter = "DO_mgL"
param_units= "mg/L"
param_lab = "Dissolved oxygen"
}
if(input$param_choices=="pH"){
name = "pH"
parameter = "pH"
param_units= ""
param_lab = "pH"
}
if(input$param_choices=="Temp"){
name = "Temperature"
parameter = "Temp_degC"
param_units= "deg C"
param_lab = "Temperature"
}
if(input$show_dates){show_dates = TRUE}else{show_dates = FALSE}
profileHeatMap(reactive_objects$sel_profs_wide, parameter = parameter, param_units = param_units, param_lab = param_lab,
depth = "Depth_m", depth_units = "m", criteria = 1, show_dates = show_dates)
}
}
})
}
## Run app----
shinyApp(ui = ui, server = server)
#runApp()
Use shinyApp() to print application; images may not load using this function
# Load packages and Set Working Directory----
my_packages <- c("lubridate", "plyr", "openxlsx", "dplyr","ggpubr",  "tidyr", "shiny","ggplot2","leaflet", "ggvis", "RSQLite","knitr","rLakeAnalyzer")
lapply(my_packages, require, character.only = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Initial Setup for Application----
# Load data files from initial data workup file (looop_data)
source("looop_data.R")
param_choices <- c("Temp", "SC", "pH", "DO", "Tn", "Chl")
names(param_choices) <- c("Temperature", "Specific Conductance","pH","Dissolved Oxygen","Turbidity","Chlorophyll-a")
# Create User Interface (UI)----
ui <-fluidPage(
# Title that will appear at top of page
navbarPage(title = div(
#style = "padding: 1px 0px; width: '100%'",
img(src = "logo_looop.png", width = "20px",height = "20px"),
"LOOOP-Lake Ontario, Oneida, Onondaga Program"
),
# Data Explorer Interactive Application tab (sub-tabs on side panel)----
tabPanel("Data Explorer", icon = icon("chart-bar"),
# Adding in side-panel navigational sub-tabs
navlistPanel("Data Explorer",
# First side-panel navigational tab (Application)
tabPanel("Application",
# Setting up interface using fluid grid system (12 columns across)
fluidRow(
# In columns 1-5, map of area with clickable data points will appear
column(5, h4("Click a site"),
shinycssloaders::withSpinner(leaflet::leafletOutput("mymap"))
),
# In columns 6-8, data filter/inputs for graphing will appear
column(3,
wellPanel(
# Overall Title
h4("Plot options"),
# Time Range Slider
uiOutput("date_slider"),
# Selection for Parameter
selectInput("param_choices", label = "Parameter:",
choices = param_choices
),
checkboxInput("show_dates", label = "Show all profile dates", value = TRUE)
)
),
# Output from selections, in columns 9-12
column(4,
# Plot graph
plotOutput("isopleths")
)
)
), # End of Application Sub-tab
# Second side-panel navigational tab (User's Guide)
tabPanel("User's Guide",
h4(p("Coming Soon"))
), # End of How-To Sub-tab
# Third side-panel navigational tab (Meta Data)
tabPanel("Metadata",
h4(p("Coming Soon"))
), # End of Meta sub-tab
# Set side-panel width (2) and Nav list panel (10) widths using fluid grid system
fluid = TRUE, widths = c(2,10))), # End of Data Explorer tab
# Lake Characteristics navigational (expandable) tab----
navbarMenu("Lake Characteristics", icon = icon("water"),
# Options beneath "Lake Characteristics"
tabPanel("Lake Ontario",
h4(p("Coming Soon"))
),
tabPanel("Oneida Lake",
h4(p("Coming Soon"))
),
tabPanel("Onondaga Lake",
h4(p("Coming Soon"))
)
), # End of Lake Characteristics tab
# Topics navigational (expandable) tab----
navbarMenu("Topics", icon = icon("lightbulb"),
# Options beneath "Topics"
tabPanel("Great Lakes Geomorphology",
# Read R markdown file that contains text and images
includeMarkdown("StaticPosts/Geomorph.Rmd")),
tabPanel("Lake Levels",
includeMarkdown("StaticPosts/LakeLevels.Rmd")),
tabPanel("Land Use",
includeMarkdown("StaticPosts/LandUse.Rmd")),
tabPanel("Fisheries",
h5(p("Coming Soon"))),
tabPanel("Effects of Pollution",
includeMarkdown("StaticPosts/Pollution.Rmd"))
), # End of Topics tab
# About LOOOP tab----
tabPanel("About LOOOP", icon = icon("info-circle"),
fluidRow(column(6,
includeMarkdown("StaticPosts/About.Rmd")),
column(6,
img(src = "~/logo_looop.png", width = "20px",height = "20px"))
)
), # End of About tab
# Credits and Privacy Policy tab----
tabPanel("Credits, Policy and Contact Information", icon = icon("question-circle"),
h4(p("Coming Soon"))
) #End of Policy tab
) # End of NavBarpage
) # End of Fluid Page
# Create server function (response to UI)----
server <- function(input, output, session){
reactive_objects = reactiveValues()
mymap <- createLeafletMap(session, "mymap")
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = buoy.coord$long,
lat = buoy.coord$lat,
popup = buoy.coord$station.code,
labelOptions = labelOptions(textsize = "15px")
)
})
})
observe({
site_click <- input$map_marker_click
if(is.null(site_click))
{return()}
siteid = site_click$Site
reactive_objects$sel_mlid = siteid})
observe({
req(reactive_objects$sel_mlid)
reactive_objects$sel_profiles=data_long[data_long$Site==reactive_objects$sel_mlid,]
profile_dates = unique(reactive_objects$sel_profiles$Date)
profile_dates = profile_dates[order(profile_dates)]
reactive_objects$profile_dates = profile_dates
})
output$date_slider <- renderUI({
req(reactive_objects$profile_dates)
date_min = min(reactive_objects$profile_dates)
date_max = max(reactive_objects$profile_dates)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max))
})
output$isopleth = renderPlot({
req(reactive_objects$sel_profs_wide, reactive_objects$sel_profiles)
if(dim(reactive_objects$sel_profs_wide)[1]>0){
if(length(unique(reactive_objects$sel_profs_wide$Date))==1){
plot.new()
text(0.5,0.5, "Only one profile date available, cannot interpolate.")
box()
}
else{
if(input$param_choices=="DO"){
name = "Dissolved Oxygen"
parameter = "DO_mgL"
param_units= "mg/L"
param_lab = "Dissolved oxygen"
}
if(input$param_choices=="pH"){
name = "pH"
parameter = "pH"
param_units= ""
param_lab = "pH"
}
if(input$param_choices=="Temp"){
name = "Temperature"
parameter = "Temp_degC"
param_units= "deg C"
param_lab = "Temperature"
}
if(input$show_dates){show_dates = TRUE}else{show_dates = FALSE}
profileHeatMap(reactive_objects$sel_profs_wide, parameter = parameter, param_units = param_units, param_lab = param_lab,
depth = "Depth_m", depth_units = "m", criteria = 1, show_dates = show_dates)
}
}
})
}
## Run app----
shinyApp(ui = ui, server = server)
