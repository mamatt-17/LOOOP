#load("~/GitHub/LOOOP/looop.rdata")
load("//aquadog/analysis/2021_LOOOP_NYSG_Small_Grant/06_Webpage-Shiny App/LOOOP/looop.rdata")
# Defining reactive objects
reactive_objects = reactiveValues()
# Map Set Up----
mymap <- createLeafletMap(session, "mymap")
# Draw Map with markers at data sites, set View of map to area of interest upon loading
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = b3$long,
lat = b3$lat,
popup = paste0(
"Station: ",b3$Station, "<br>",
"Depth(s): ",b3$U.Depths, "<br>",
"Year(s): ",b3$U.Years),
labelOptions = labelOptions(textsize = "15px")
)
})
})
# Reactivity----
# Filtering depth choices based on selected site
site_choices <- reactive({
filter(b5, Station == input$site_choices)
})
observeEvent(site_choices(),{
choices <- unique(site_choices()$Depth)
updateSelectInput(inputId = "depth", choices = choices)
})
depth <- reactive({
req(input$depth)
filter(site_choices(), Depth == input$depth)
})
# When station is selected, date slider that controls the X axis appears
output$date_slider <- renderUI({
req(input$site_choices)
date_min = min(site_choices()$Date)
date_max = max(site_choices()$Date)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max),timeFormat = "%m-%d-%Y")
})
# Create new data frame that reacts to user selections
selectedData <- reactive({
b5<- b5[,c(input$site_choices,input$param_choices, input$depth)]%>%
complete(Date = seq.Date(min(Date, na.rm = T), max(Date, na.rm = T), by = 'day')) %>%
fill(c(Station, Depth, params ,lat, long, U.Depths, U.Years))%>%
mutate(Abs.Time = replace_na(Abs.Time, "00:00:00"),
Datetime = as.POSIXct(paste(Date, Abs.Time), format = "%Y-%m-%d %H:%M" ))
})
# Create a timeseries plot based on the selected options----
output$plot = renderPlot({
req(reactive_objects$b5, reactive_objects$b5)
if(input$param_choices=="DO"){
name = "Dissolved Oxygen"
limits = "DO_mgL"
breaks = "mg/L"
}
if(input$param_choices=="pH"){
name = "pH"
limits = "pH"
breaks = ""
}
if(input$param_choices=="Temp"){
name = "Temperature"
limits = "Temp_degC"
breaks= "deg C"
}
if(input$show_dates){show_dates = TRUE}else{show_dates = FALSE}
ggplot(data = selectedData(), mapping = aes(x = Datetime, y = value))+
geom_point(size = 2)+
geom_line()+
theme_minimal()+
#scale_y_continuous(name =  name,
#                  limits = c(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),
#                 breaks = c(seq(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),.5))+
scale_x_datetime(name = "Date",
date_breaks = "1 month",
date_labels = "%b %y",
date_minor_breaks = "1 day")+
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.text = element_text(size = 12)
)
})
}
runApp()
runApp()
# Create server function (response to UI)----
server <- function(input, output, session){
# Create Dialog Box to keep user from reloading page
showModal(modalDialog(title= "MAP LOADING","Please wait for map to draw before proceeding.",size = "l",footer = NULL))
# Remove Loading Dialog Box when map has been drawn
observe({
req(mymap)
removeModal()
})
# Set up app with data and defining objects----
#load("~/GitHub/LOOOP/looop.rdata")
load("//aquadog/analysis/2021_LOOOP_NYSG_Small_Grant/06_Webpage-Shiny App/LOOOP/looop.rdata")
# Defining reactive objects
reactive_objects = reactiveValues()
# Map Set Up----
mymap <- createLeafletMap(session, "mymap")
# Draw Map with markers at data sites, set View of map to area of interest upon loading
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = b3$long,
lat = b3$lat,
popup = paste0(
"Station: ",b3$Station, "<br>",
"Depth(s): ",b3$U.Depths, "<br>",
"Year(s): ",b3$U.Years),
labelOptions = labelOptions(textsize = "15px")
)
})
})
# Reactivity----
# Filtering depth choices based on selected site
site_choices <- reactive({
filter(b5, Station == input$site_choices)
})
observeEvent(site_choices(),{
choices <- unique(site_choices()$Depth)
updateSelectInput(inputId = "depth", choices = choices)
})
depth <- reactive({
req(input$depth)
filter(site_choices(), Depth == input$depth)
})
# When station is selected, date slider that controls the X axis appears
output$date_slider <- renderUI({
req(input$site_choices)
date_min = min(site_choices()$Date)
date_max = max(site_choices()$Date)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max),timeFormat = "%m-%d-%Y")
})
# Create new data frame that reacts to user selections
selectedData <- reactive({
b5<- b5[c(input$site_choices,input$param_choices, input$depth),]%>%
complete(Date = seq.Date(min(Date, na.rm = T), max(Date, na.rm = T), by = 'day')) %>%
fill(c(Station, Depth, params ,lat, long, U.Depths, U.Years))%>%
mutate(Abs.Time = replace_na(Abs.Time, "00:00:00"),
Datetime = as.POSIXct(paste(Date, Abs.Time), format = "%Y-%m-%d %H:%M" ))
})
# Create a timeseries plot based on the selected options----
output$plot = renderPlot({
ggplot(data = selectedData(), mapping = aes(x = Datetime, y = value))+
geom_point(size = 2)+
geom_line()+
theme_minimal()+
#scale_y_continuous(name =  name,
#                  limits = c(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),
#                 breaks = c(seq(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),.5))+
scale_x_datetime(name = "Date",
date_breaks = "1 month",
date_labels = "%b %y",
date_minor_breaks = "1 day")+
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.text = element_text(size = 12)
)
})
}
runApp()
# Create server function (response to UI)----
server <- function(input, output, session){
# Create Dialog Box to keep user from reloading page
showModal(modalDialog(title= "MAP LOADING","Please wait for map to draw before proceeding.",size = "l",footer = NULL))
# Remove Loading Dialog Box when map has been drawn
observe({
req(mymap)
removeModal()
})
# Set up app with data and defining objects----
#load("~/GitHub/LOOOP/looop.rdata")
load("//aquadog/analysis/2021_LOOOP_NYSG_Small_Grant/06_Webpage-Shiny App/LOOOP/looop.rdata")
# Defining reactive objects
reactive_objects = reactiveValues()
# Map Set Up----
mymap <- createLeafletMap(session, "mymap")
# Draw Map with markers at data sites, set View of map to area of interest upon loading
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = b3$long,
lat = b3$lat,
popup = paste0(
"Station: ",b3$Station, "<br>",
"Depth(s): ",b3$U.Depths, "<br>",
"Year(s): ",b3$U.Years),
labelOptions = labelOptions(textsize = "15px")
)
})
})
# Reactivity----
# Filtering depth choices based on selected site
site_choices <- reactive({
filter(b5, Station == input$site_choices)
})
observeEvent(site_choices(),{
choices <- unique(site_choices()$Depth)
updateSelectInput(inputId = "depth", choices = choices)
})
depth <- reactive({
req(input$depth)
filter(site_choices(), Depth == input$depth)
})
# When station is selected, date slider that controls the X axis appears
output$date_slider <- renderUI({
req(input$site_choices)
date_min = min(site_choices()$Date)
date_max = max(site_choices()$Date)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max),timeFormat = "%m-%d-%Y")
})
# Create new data frame that reacts to user selections
selectedData <- reactive({
b5<- b5[c(input$site_choices,input$param_choices, input$depth),]%>%
complete(Date = seq.Date(min(Date, na.rm = T), max(Date, na.rm = T), by = 'day')) %>%
fill(c(Station, Depth, params,lat, long, U.Depths, U.Years))%>%
mutate(Abs.Time = replace_na(Abs.Time, "00:00:00"),
Datetime = as.POSIXct(paste(Date, Abs.Time), format = "%Y-%m-%d %H:%M" ))
})
# Create a timeseries plot based on the selected options----
output$plot = renderPlot({
ggplot(data = selectedData(), mapping = aes(x = Datetime, y = value))+
geom_point(size = 2)+
geom_line()+
theme_minimal()+
#scale_y_continuous(name =  name,
#                  limits = c(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),
#                 breaks = c(seq(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),.5))+
#  scale_x_datetime(name = "Date",
#                  date_breaks = "1 month",
#                 date_labels = "%b %y",
#                date_minor_breaks = "1 day")+
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.text = element_text(size = 12)
)
})
}
runApp()
# Create server function (response to UI)----
server <- function(input, output, session){
# Create Dialog Box to keep user from reloading page
showModal(modalDialog(title= "MAP LOADING","Please wait for map to draw before proceeding.",size = "l",footer = NULL))
# Remove Loading Dialog Box when map has been drawn
observe({
req(mymap)
removeModal()
})
# Set up app with data and defining objects----
#load("~/GitHub/LOOOP/looop.rdata")
load("//aquadog/analysis/2021_LOOOP_NYSG_Small_Grant/06_Webpage-Shiny App/LOOOP/looop.rdata")
# Defining reactive objects
reactive_objects = reactiveValues()
# Map Set Up----
mymap <- createLeafletMap(session, "mymap")
# Draw Map with markers at data sites, set View of map to area of interest upon loading
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = b3$long,
lat = b3$lat,
popup = paste0(
"Station: ",b3$Station, "<br>",
"Depth(s): ",b3$U.Depths, "<br>",
"Year(s): ",b3$U.Years),
labelOptions = labelOptions(textsize = "15px")
)
})
})
# Reactivity----
# Filtering depth choices based on selected site
site_choices <- reactive({
filter(b5, Station == input$site_choices)
})
observeEvent(site_choices(),{
choices <- unique(site_choices()$Depth)
updateSelectInput(inputId = "depth", choices = choices)
})
depth <- reactive({
req(input$depth)
filter(site_choices(), Depth == input$depth)
})
# When station is selected, date slider that controls the X axis appears
output$date_slider <- renderUI({
req(input$site_choices)
date_min = min(site_choices()$Date)
date_max = max(site_choices()$Date)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max),timeFormat = "%m-%d-%Y")
})
# Create new data frame that reacts to user selections
selectedData <- reactive({
b5<- b5[c(input$site_choices,input$param_choices, input$depth),]
})
# Create a timeseries plot based on the selected options----
output$plot = renderPlot({
ggplot(data = selectedData(), mapping = aes(x = Datetime, y = value))+
geom_point(size = 2)+
geom_line()+
theme_minimal()+
#scale_y_continuous(name =  name,
#                  limits = c(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),
#                 breaks = c(seq(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),.5))+
#  scale_x_datetime(name = "Date",
#                  date_breaks = "1 month",
#                 date_labels = "%b %y",
#                date_minor_breaks = "1 day")+
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.text = element_text(size = 12)
)
})
}
runApp()
# Create server function (response to UI)----
server <- function(input, output, session){
# Create Dialog Box to keep user from reloading page
showModal(modalDialog(title= "MAP LOADING","Please wait for map to draw before proceeding.",size = "l",footer = NULL))
# Remove Loading Dialog Box when map has been drawn
observe({
req(mymap)
removeModal()
})
# Set up app with data and defining objects----
#load("~/GitHub/LOOOP/looop.rdata")
load("//aquadog/analysis/2021_LOOOP_NYSG_Small_Grant/06_Webpage-Shiny App/LOOOP/looop.rdata")
# Defining reactive objects
reactive_objects = reactiveValues()
# Map Set Up----
mymap <- createLeafletMap(session, "mymap")
# Draw Map with markers at data sites, set View of map to area of interest upon loading
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = b3$long,
lat = b3$lat,
popup = paste0(
"Station: ",b3$Station, "<br>",
"Depth(s): ",b3$U.Depths, "<br>",
"Year(s): ",b3$U.Years),
labelOptions = labelOptions(textsize = "15px")
)
})
})
# Reactivity----
# Filtering depth choices based on selected site
site_choices <- reactive({
filter(b5, Station == input$site_choices)
})
observeEvent(site_choices(),{
choices <- unique(site_choices()$Depth)
updateSelectInput(inputId = "depth", choices = choices)
})
depth <- reactive({
req(input$depth)
filter(site_choices(), Depth == input$depth)
})
# When station is selected, date slider that controls the X axis appears
output$date_slider <- renderUI({
req(input$site_choices)
date_min = min(site_choices()$Date)
date_max = max(site_choices()$Date)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max),timeFormat = "%m-%d-%Y")
})
# Create new data frame that reacts to user selections
selectedData <- reactive({
b5[c(input$site_choices,input$param_choices, input$depth),]
})
# Create a timeseries plot based on the selected options----
output$plot = renderPlot({
ggplot(data = selectedData(), mapping = aes(x = Datetime, y = value))+
geom_point(size = 2)+
geom_line()+
theme_minimal()+
#scale_y_continuous(name =  name,
#                  limits = c(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),
#                 breaks = c(seq(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),.5))+
#  scale_x_datetime(name = "Date",
#                  date_breaks = "1 month",
#                 date_labels = "%b %y",
#                date_minor_breaks = "1 day")+
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.text = element_text(size = 12)
)
})
}
runApp()
# Create server function (response to UI)----
server <- function(input, output, session){
# Create Dialog Box to keep user from reloading page
showModal(modalDialog(title= "MAP LOADING","Please wait for map to draw before proceeding.",size = "l",footer = NULL))
# Remove Loading Dialog Box when map has been drawn
observe({
req(mymap)
removeModal()
})
# Set up app with data and defining objects----
#load("~/GitHub/LOOOP/looop.rdata")
load("//aquadog/analysis/2021_LOOOP_NYSG_Small_Grant/06_Webpage-Shiny App/LOOOP/looop.rdata")
# Defining reactive objects
reactive_objects = reactiveValues()
# Map Set Up----
mymap <- createLeafletMap(session, "mymap")
# Draw Map with markers at data sites, set View of map to area of interest upon loading
session$onFlushed(once= T, function(){
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.Terrain,
options = providerTileOptions(noWrap = TRUE)
) %>% setView(
lng = -76.354,
lat= 43.248,
zoom = 9
) %>% addCircleMarkers(
lng = b3$long,
lat = b3$lat,
popup = paste0(
"Station: ",b3$Station, "<br>",
"Depth(s): ",b3$U.Depths, "<br>",
"Year(s): ",b3$U.Years),
labelOptions = labelOptions(textsize = "15px")
)
})
})
# Reactivity----
# Filtering depth choices based on selected site
site_choices <- reactive({
filter(b5, Station == input$site_choices)
})
observeEvent(site_choices(),{
choices <- unique(site_choices()$Depth)
updateSelectInput(inputId = "depth", choices = choices)
})
depth <- reactive({
req(input$depth)
filter(site_choices(), Depth == input$depth)
})
# When station is selected, date slider that controls the X axis appears
output$date_slider <- renderUI({
req(input$site_choices)
date_min = min(site_choices()$Date)
date_max = max(site_choices()$Date)
sliderInput("date_slider","Date range:", min = date_min, max = date_max, value = c(date_min,date_max),timeFormat = "%m-%d-%Y")
})
# Create new data frame that reacts to user selections
selectedData <- reactive({
b5[c(input$site_choices,input$param_choices, input$depth),]
})
# Create a timeseries plot based on the selected options----
output$plot = renderPlot({
ggplot(data = selectedData, mapping = aes(x = Datetime, y = value))+
geom_point(size = 2)+
geom_line()+
theme_minimal()+
#scale_y_continuous(name =  name,
#                  limits = c(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),
#                 breaks = c(seq(floor(min(b6$value, na.rm = T)),ceiling(max(b6$value,na.rm = T))),.5))+
#  scale_x_datetime(name = "Date",
#                  date_breaks = "1 month",
#                 date_labels = "%b %y",
#                date_minor_breaks = "1 day")+
theme(
panel.border = element_rect(color = "black", fill = NA, size = 1),
axis.ticks = element_line(color = "black", size = 1),
axis.text = element_text(size = 12)
)
})
}
runApp()
